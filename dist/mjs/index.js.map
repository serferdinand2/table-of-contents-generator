{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["interface Headers {\n\theaderText: string;\n\tchildren: Headers[];\n}\n\ntype ContentType = 'md' | 'html';\n\nconst getHeadersFromHTML = (html: string) => {\n\tconst headerRegex = /<h[1-6][^>]*>[\\s\\S]*?<\\/h[1-6]>/g;\n\tconst headers = html.match(headerRegex);\n\treturn headers;\n};\n\nconst getHeadersFromMarkdown = (markdown: string) => {\n\t// load markdown\n\tconst headerRegex = /#{1,6}.*\\n/g;\n\tconst headers = markdown.match(headerRegex);\n\n\treturn headers;\n};\n\n// get headers from html, or markdown\nconst inputHeaders = (source: string, type: ContentType) => {\n\tif (type === 'md') {\n\t\treturn getHeadersFromMarkdown(source);\n\t}\n\tif (type === 'html') {\n\t\treturn getHeadersFromHTML(source);\n\t}\n};\n\nexport const parseHeaders = (source: string, type: ContentType): Headers[] => {\n\t// get all headers\n\tconst htmlHeaders = inputHeaders(source, type);\n\n\tif (!htmlHeaders || !htmlHeaders.length) {\n\t\treturn [];\n\t}\n\n\t// nest headers\n\tconst headers: Headers[] | undefined = [];\n\tlet currentHeader: Headers[] | undefined = headers;\n\tlet currentLevel = 0;\n\tif (type === 'md') {\n\t\tcurrentLevel = htmlHeaders[0].split('#').length - 1;\n\t} else {\n\t\tcurrentLevel = parseInt(htmlHeaders[0].charAt(2));\n\t}\n\n\tfor (const header of htmlHeaders) {\n\t\tlet headerLevel: number;\n\t\tlet headerText: string;\n\n\t\tif (type === 'md') {\n\t\t\theaderLevel = header.split('#').length - 1;\n\t\t} else {\n\t\t\theaderLevel = parseInt(header.charAt(2));\n\t\t}\n\n\t\tif (type === 'md') {\n\t\t\theaderText = header\n\t\t\t\t.replace(/#{1,6}/g, '')\n\t\t\t\t.replace(/\\n/g, '')\n\t\t\t\t.replace(/ {2}/g, ' ')\n\t\t\t\t.trim();\n\t\t} else {\n\t\t\theaderText = header\n\t\t\t\t.replace(/<[^>]*>/g, '')\n\t\t\t\t.trim()\n\t\t\t\t.replace(/\\n\\s*/g, ' ')\n\t\t\t\t.replace(/ {2}/g, ' ');\n\t\t}\n\n\t\t// console.log(headerText, headerLevel);\n\t\tif (headerLevel === currentLevel && currentHeader) {\n\t\t\tcurrentHeader.push({ headerText: headerText, children: [] });\n\t\t} else if (headerLevel > currentLevel && currentHeader) {\n\t\t\tcurrentHeader[currentHeader.length - 1].children = [\n\t\t\t\t{ headerText, children: [] },\n\t\t\t];\n\t\t\tcurrentHeader = currentHeader[currentHeader.length - 1].children;\n\t\t\tcurrentLevel = headerLevel;\n\t\t} else if (headerLevel < currentLevel) {\n\t\t\tcurrentHeader = headers;\n\t\t\tfor (let i = 1; i < headerLevel; i++) {\n\t\t\t\tcurrentHeader =\n\t\t\t\t\tcurrentHeader[currentHeader.length - 1].children;\n\t\t\t}\n\t\t\tcurrentLevel = headerLevel;\n\t\t\tcurrentHeader.push({ headerText: headerText, children: [] });\n\t\t}\n\t}\n\treturn headers;\n};\n\n// convert nested array to html list\nexport const nestedArrayToHtmlList = (headers: Headers[]) => {\n\tlet html = '<ul>';\n\n\tfor (const header of headers) {\n\t\tconst id = header.headerText\n\t\t\t.replace(/\\s/g, '-')\n\t\t\t.replace(/:/g, '')\n\t\t\t.toLowerCase();\n\n\t\thtml += `<li><a href=#${id}>${header.headerText}</a>`;\n\n\t\tif (\n\t\t\ttypeof header !== 'undefined' &&\n\t\t\theader.children &&\n\t\t\theader.children.length\n\t\t) {\n\t\t\thtml += nestedArrayToHtmlList(header.children);\n\t\t}\n\n\t\thtml += '</li>';\n\t}\n\n\thtml += '</ul>';\n\n\treturn html;\n};\n\n// export final function\nexport const generateTableOfContents = (source: string, type: ContentType) => {\n\tconst headers = parseHeaders(source, type);\n\treturn nestedArrayToHtmlList(headers);\n};\n"],
  "mappings": ";AAOA,IAAM,qBAAqB,CAAC,SAAiB;AAC5C,QAAM,cAAc;AACpB,QAAM,UAAU,KAAK,MAAM,WAAW;AACtC,SAAO;AACR;AAEA,IAAM,yBAAyB,CAAC,aAAqB;AAEpD,QAAM,cAAc;AACpB,QAAM,UAAU,SAAS,MAAM,WAAW;AAE1C,SAAO;AACR;AAGA,IAAM,eAAe,CAAC,QAAgB,SAAsB;AAC3D,MAAI,SAAS,MAAM;AAClB,WAAO,uBAAuB,MAAM;AAAA,EACrC;AACA,MAAI,SAAS,QAAQ;AACpB,WAAO,mBAAmB,MAAM;AAAA,EACjC;AACD;AAEO,IAAM,eAAe,CAAC,QAAgB,SAAiC;AAE7E,QAAM,cAAc,aAAa,QAAQ,IAAI;AAE7C,MAAI,CAAC,eAAe,CAAC,YAAY,QAAQ;AACxC,WAAO,CAAC;AAAA,EACT;AAGA,QAAM,UAAiC,CAAC;AACxC,MAAI,gBAAuC;AAC3C,MAAI,eAAe;AACnB,MAAI,SAAS,MAAM;AAClB,mBAAe,YAAY,CAAC,EAAE,MAAM,GAAG,EAAE,SAAS;AAAA,EACnD,OAAO;AACN,mBAAe,SAAS,YAAY,CAAC,EAAE,OAAO,CAAC,CAAC;AAAA,EACjD;AAEA,aAAW,UAAU,aAAa;AACjC,QAAI;AACJ,QAAI;AAEJ,QAAI,SAAS,MAAM;AAClB,oBAAc,OAAO,MAAM,GAAG,EAAE,SAAS;AAAA,IAC1C,OAAO;AACN,oBAAc,SAAS,OAAO,OAAO,CAAC,CAAC;AAAA,IACxC;AAEA,QAAI,SAAS,MAAM;AAClB,mBAAa,OACX,QAAQ,WAAW,EAAE,EACrB,QAAQ,OAAO,EAAE,EACjB,QAAQ,SAAS,GAAG,EACpB,KAAK;AAAA,IACR,OAAO;AACN,mBAAa,OACX,QAAQ,YAAY,EAAE,EACtB,KAAK,EACL,QAAQ,UAAU,GAAG,EACrB,QAAQ,SAAS,GAAG;AAAA,IACvB;AAGA,QAAI,gBAAgB,gBAAgB,eAAe;AAClD,oBAAc,KAAK,EAAE,YAAwB,UAAU,CAAC,EAAE,CAAC;AAAA,IAC5D,WAAW,cAAc,gBAAgB,eAAe;AACvD,oBAAc,cAAc,SAAS,CAAC,EAAE,WAAW;AAAA,QAClD,EAAE,YAAY,UAAU,CAAC,EAAE;AAAA,MAC5B;AACA,sBAAgB,cAAc,cAAc,SAAS,CAAC,EAAE;AACxD,qBAAe;AAAA,IAChB,WAAW,cAAc,cAAc;AACtC,sBAAgB;AAChB,eAAS,IAAI,GAAG,IAAI,aAAa,KAAK;AACrC,wBACC,cAAc,cAAc,SAAS,CAAC,EAAE;AAAA,MAC1C;AACA,qBAAe;AACf,oBAAc,KAAK,EAAE,YAAwB,UAAU,CAAC,EAAE,CAAC;AAAA,IAC5D;AAAA,EACD;AACA,SAAO;AACR;AAGO,IAAM,wBAAwB,CAAC,YAAuB;AAC5D,MAAI,OAAO;AAEX,aAAW,UAAU,SAAS;AAC7B,UAAM,KAAK,OAAO,WAChB,QAAQ,OAAO,GAAG,EAClB,QAAQ,MAAM,EAAE,EAChB,YAAY;AAEd,YAAQ,gBAAgB,EAAE,IAAI,OAAO,UAAU;AAE/C,QACC,OAAO,WAAW,eAClB,OAAO,YACP,OAAO,SAAS,QACf;AACD,cAAQ,sBAAsB,OAAO,QAAQ;AAAA,IAC9C;AAEA,YAAQ;AAAA,EACT;AAEA,UAAQ;AAER,SAAO;AACR;AAGO,IAAM,0BAA0B,CAAC,QAAgB,SAAsB;AAC7E,QAAM,UAAU,aAAa,QAAQ,IAAI;AACzC,SAAO,sBAAsB,OAAO;AACrC;",
  "names": []
}
